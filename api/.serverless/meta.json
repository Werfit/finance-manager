{
  "/Users/viacheslaviskenderov/Documents/nure/diplom/finance-manager/api/serverless.yml": {
    "versionFramework": "4.7.0",
    "servicePath": "/Users/viacheslaviskenderov/Documents/nure/diplom/finance-manager/api/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "aws-python-flask-api",
      "frameworkVersion": "4",
      "custom": {
        "wsgi": {
          "app": "app.app"
        },
        "pythonRequirements": {
          "layer": true,
          "dockerizePip": true,
          "zip": true,
          "slim": true,
          "noDeploy": [
            "pandas",
            "numpy",
            "scikit-learn"
          ]
        }
      },
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/aws-python-flask-api-dev-api"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "aws-python-flask-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-python-flask-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-python-flask-api-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "aws-python-flask-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "PythonRequirementsLambdaLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "Content": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-41e0e867-b730",
                  "S3Key": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/pythonRequirements.zip"
                },
                "LayerName": "aws-python-flask-api-dev-python-requirements",
                "Description": "Python requirements generated by serverless-python-requirements.",
                "CompatibleRuntimes": [
                  "python3.12"
                ]
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-41e0e867-b730",
                  "S3Key": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/aws-python-flask-api.zip"
                },
                "Handler": "wsgi_handler.handler",
                "Runtime": "python3.12",
                "FunctionName": "aws-python-flask-api-dev-api",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  {
                    "Ref": "PythonRequirementsLambdaLayer"
                  }
                ]
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionSQQa75X8hxmpqcTcnfGrzhZB949x2VDpVDngHB1meY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "FRDgG06FyZauv7GZPRmpVdfPk0Ztb1975bvMqDndJyw="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-aws-python-flask-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1740755856647": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAny",
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-41e0e867-b730",
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "PythonRequirementsLambdaLayerQualifiedArn": {
              "Description": "Current Lambda layer version",
              "Value": {
                "Ref": "PythonRequirementsLambdaLayer"
              },
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerQualifiedArn"
              }
            },
            "PythonRequirementsLambdaLayerHash": {
              "Description": "Current Lambda layer hash",
              "Value": "814802b5687d6ecb1f1da87e484a87fb2185dc9a",
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerHash"
              }
            },
            "PythonRequirementsLambdaLayerS3Key": {
              "Description": "Current Lambda layer S3Key",
              "Value": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/pythonRequirements.zip",
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerS3Key"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionSQQa75X8hxmpqcTcnfGrzhZB949x2VDpVDngHB1meY"
              },
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-aws-python-flask-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "layers": [
            {
              "Ref": "PythonRequirementsLambdaLayer"
            }
          ],
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": {
                "path": "",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "aws-python-flask-api-dev-api",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionSQQa75X8hxmpqcTcnfGrzhZB949x2VDpVDngHB1meY"
        }
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ]
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-python-flask-api-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-python-flask-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-python-flask-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-python-flask-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-python-flask-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PythonRequirementsLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-41e0e867-b730",
                "S3Key": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/pythonRequirements.zip"
              },
              "LayerName": "aws-python-flask-api-dev-python-requirements",
              "Description": "Python requirements generated by serverless-python-requirements.",
              "CompatibleRuntimes": [
                "python3.12"
              ]
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-41e0e867-b730",
                "S3Key": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/aws-python-flask-api.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.12",
              "FunctionName": "aws-python-flask-api-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "PythonRequirementsLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionSQQa75X8hxmpqcTcnfGrzhZB949x2VDpVDngHB1meY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "FRDgG06FyZauv7GZPRmpVdfPk0Ztb1975bvMqDndJyw="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-aws-python-flask-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1740755856647": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-41e0e867-b730",
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "PythonRequirementsLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "PythonRequirementsLambdaLayer"
            },
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerQualifiedArn"
            }
          },
          "PythonRequirementsLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "814802b5687d6ecb1f1da87e484a87fb2185dc9a",
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerHash"
            }
          },
          "PythonRequirementsLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/aws-python-flask-api/dev/1740756269362-2025-02-28T15:24:29.362Z/pythonRequirements.zip",
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-PythonRequirementsLambdaLayerS3Key"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionSQQa75X8hxmpqcTcnfGrzhZB949x2VDpVDngHB1meY"
            },
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-python-flask-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "An error occurred: PythonRequirementsLambdaLayer - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: AWSLambdaInternal; Status Code: 400; Error Code: InvalidParameterValueException; Request ID: 6bc0d286-65ee-48fc-9ad7-a206a4463f80; Proxy: null)\" (RequestToken: cb4aba71-d62a-eae9-af4f-586897179331, HandlerErrorCode: GeneralServiceException).",
      "stack": "ServerlessError3: An error occurred: PythonRequirementsLambdaLayer - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: AWSLambdaInternal; Status Code: 400; Error Code: InvalidParameterValueException; Request ID: 6bc0d286-65ee-48fc-9ad7-a206a4463f80; Proxy: null)\" (RequestToken: cb4aba71-d62a-eae9-af4f-586897179331, HandlerErrorCode: GeneralServiceException).\n    at file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1231:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.update (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1231:25551)\n    at async aws:deploy:deploy:updateStack (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1242:8029)\n    at async PluginManager.runHooks (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:9562)\n    at async PluginManager.invoke (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10333)\n    at async PluginManager.spawn (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10696)\n    at async PluginManager.runHooks (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:9562)\n    at async PluginManager.invoke (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:10333)\n    at async PluginManager.run (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1433:11068)\n    at async Serverless.run (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1440:10575)\n    at async runFramework (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1467:1776)\n    at async TraditionalRunner.run (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1463:28364)\n    at async route (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1509:2779)\n    at async Object.run (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1510:3668)\n    at async run2 (file:///Users/viacheslaviskenderov/.serverless/releases/4.7.0/package/dist/sf-core.js:1510:4821)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_LAMBDA_LAYER_VERSION_CREATE_FAILED"
    },
    "serviceRawFile": "service: aws-python-flask-api\n\nframeworkVersion: \"4\"\n\ncustom:\n  wsgi:\n    app: app.app\n  pythonRequirements:\n    layer: true\n    dockerizePip: true\n    zip: true\n    slim: true # Removes unnecessary files from dependencies\n    noDeploy:\n      - pandas\n      - numpy\n      - scikit-learn # Exclude these if using AWS Lambda Layer\n\nprovider:\n  name: aws\n  runtime: python3.12\n\nfunctions:\n  api:\n    layers:\n      - Ref: PythonRequirementsLambdaLayer\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "d0903424-c598-4860-bd9a-0a0878627665",
    "orgName": "werfit",
    "userId": "MVySch1lhtrfXwvsYp",
    "userName": "werfit",
    "serviceProviderAwsAccountId": "018486252290",
    "serviceProviderAwsCfStackName": "aws-python-flask-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:018486252290:stack/aws-python-flask-api-dev/9a1a9770-f5e3-11ef-8424-0afff0f60141",
    "serviceProviderAwsCfStackCreated": "2025-02-28T14:52:16.475Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-28T15:14:54.164Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:018486252290:function:aws-python-flask-api-dev-api:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-aws-python-flask-api-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://s73mzoa3qb.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-aws-python-flask-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-41e0e867-b730",
        "ExportName": "sls-aws-python-flask-api-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}